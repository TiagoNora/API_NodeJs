'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

// TODO: cleanup the logs
// TODO: jsDoc


var debug = require('debug')('OpenSkyApi');
var config = require('config');
var request = require('request');
var OpenSkyStates = require('./OpenSkyStates');

var osConfig = config.get('openSkyNetwork');

var OpenSkyApi = function () {
  function OpenSkyApi() {
    var username = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;
    var password = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;

    _classCallCheck(this, OpenSkyApi);

    this.last_request = [];
    this.auth = '';

    // Auth
    if (username && password) {
      this.auth = username + ':' + password + '@';
    }

    // Request Defaults
    this.openSkyClient = request.defaults({
      baseUrl: osConfig.protocol + '://' + this.auth + osConfig.hostname,
      json: true
    });
  }

  _createClass(OpenSkyApi, [{
    key: 'tryGet',
    value: function tryGet(endpoint, params) {
      var error = void 0;

      if (!this.checkRateLimit(endpoint)) {
        error = new Error('Blocking request. Could not process request because of rate limit');
        debug(error.message);
        return Promise.reject(error);
      }

      this.last_request[endpoint] = Math.floor(Date.now() / 1000);

      return this.getJson(endpoint, params);
    }
  }, {
    key: 'getJson',
    value: function getJson(endpoint, params) {
      var _this = this;

      var error = void 0;

      var options = {
        uri: endpoint,
        qs: params
      };

      return new Promise(function (resolve, reject) {
        _this.openSkyClient.get(options, function (err, res, body) {
          if (err) {
            error = new Error('Request Failed.\n' + err);
            debug(error.message);
            reject(error);
          }

          if (res.statusCode !== 200) {
            error = new Error('Request Failed.\nStatus Code: ' + res.statusCode);
            debug(error.message);
            reject(error);
          }

          resolve(body);
        });
      });
    }
  }, {
    key: 'checkRateLimit',
    value: function checkRateLimit(endpoint) {
      var now = Math.floor(Date.now() / 1000);

      if (!this.last_request[endpoint]) {
        return true;
      }

      if (this.auth) {
        return Math.abs(now - this.last_request[endpoint]) >= osConfig.rateLimits[endpoint].auth;
      }

      return Math.abs(now - this.last_request[endpoint]) >= osConfig.rateLimits[endpoint].noAuth;
    }
  }, {
    key: 'getStates',
    value: function getStates(params) {
      return this.tryGet('/states/all', params, 'getStates').then(function (allStates) {
        return new OpenSkyStates(allStates);
      });
    }
  }, {
    key: 'getOwnStates',
    value: function getOwnStates(params) {
      var error = void 0;

      if (!this.auth) {
        error = new Error('Blocking request. You need to be authorized to fetch your own states.');
        debug(error.message);
        return Promise.reject(error);
      }

      return this.tryGet('/states/own', params, 'getOwnStates').then(function (ownStates) {
        return new OpenSkyStates(ownStates);
      });
    }
  }]);

  return OpenSkyApi;
}();

module.exports = OpenSkyApi;